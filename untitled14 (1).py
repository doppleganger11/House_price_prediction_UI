# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDyP1uSpoeAdVncLIAfw2RFDgoHTInna
"""

# train.py
from pathlib import Path
import json
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import joblib

from model import (
    NUMERIC_FEATURES,
    CATEGORICAL_FEATURES,
    CATEGORICAL_OPTIONS,
    build_pipeline,
)

ARTIFACTS_DIR = Path(__file__).resolve().parent / "artifacts"
MODEL_PATH = ARTIFACTS_DIR / "house_price_pipeline.joblib"
METRICS_PATH = ARTIFACTS_DIR / "metrics.json"
SCHEMA_PATH = ARTIFACTS_DIR / "schema.json"

def generate_synthetic_data(n_samples: int = 5000, random_state: int = 42) -> pd.DataFrame:
    rng = np.random.default_rng(random_state)

    sqft = rng.integers(400, 4000, size=n_samples)
    num_rooms = rng.integers(1, 7, size=n_samples)            # 1–6
    num_bathrooms = rng.integers(1, 5, size=n_samples)        # 1–4
    age_years = rng.integers(0, 51, size=n_samples)           # 0–50
    distance_to_city_km = rng.uniform(0, 30, size=n_samples)  # 0–30 km
    lot_size_sqft = np.maximum((sqft * rng.uniform(1.2, 2.0, size=n_samples)).astype(int),
                               sqft + 100)  # ensure bigger than house

    has_garage_bin = rng.binomial(1, 0.55, size=n_samples)
    has_garden_bin = rng.binomial(1, 0.6, size=n_samples)
    has_garage = np.where(has_garage_bin == 1, "Yes", "No")
    has_garden = np.where(has_garden_bin == 1, "Yes", "No")

    neighborhoods = np.array(["A", "B", "C", "D"])
    neighborhood = rng.choice(neighborhoods, size=n_samples, p=[0.25, 0.35, 0.25, 0.15])

    # Neighborhood premiums
    nb_premium = {"A": 30000, "B": 15000, "C": 0, "D": -10000}
    premium = np.vectorize(nb_premium.get)(neighborhood)

    # Price signal (simple linear function + noise)
    price = (
        30000
        + 150 * sqft
        + 10000 * num_rooms
        + 8000 * num_bathrooms
        - 400 * age_years
        - 500 * distance_to_city_km
        + 2 * lot_size_sqft
        + 15000 * has_garage_bin
        + 10000 * has_garden_bin
        + premium
        + rng.normal(0, 25000, size=n_samples)  # noise
    )
    price = np.maximum(price, 20000)  # keep positive-ish

    df = pd.DataFrame(
        {
            "sqft": sqft,
            "num_rooms": num_rooms,
            "num_bathrooms": num_bathrooms,
            "age_years": age_years,
            "distance_to_city_km": distance_to_city_km,
            "lot_size_sqft": lot_size_sqft,
            "has_garage": has_garage,
            "has_garden": has_garden,
            "neighborhood": neighborhood,
            "price": price.astype(float),
        }
    )
    return df

def main(n_samples: int = 5000, random_state: int = 42) -> None:
    ARTIFACTS_DIR.mkdir(parents=True, exist_ok=True)

    df = generate_synthetic_data(n_samples=n_samples, random_state=random_state)

    X = df[NUMERIC_FEATURES + CATEGORICAL_FEATURES].copy()
    y = df["price"].copy()

    X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.2, random_state=random_state
    )

    pipe = build_pipeline()
    pipe.fit(X_train, y_train)

    y_pred = pipe.predict(X_test)

    metrics = {
        "MAE": float(mean_absolute_error(y_test, y_pred)),
        "RMSE": float(np.sqrt(mean_squared_error(y_test, y_pred))),
        "R2": float(r2_score(y_test, y_pred)),
        "n_train": int(X_train.shape[0]),
        "n_test": int(X_test.shape[0]),
    }

    joblib.dump(pipe, MODEL_PATH)
    with open(METRICS_PATH, "w", encoding="utf-8") as f:
        json.dump(metrics, f, indent=2)
    with open(SCHEMA_PATH, "w", encoding="utf-8") as f:
        json.dump(
            {
                "numeric_features": NUMERIC_FEATURES,
                "categorical_features": CATEGORICAL_FEATURES,
                "categorical_options": CATEGORICAL_OPTIONS,
            },
            f,
            indent=2,
        )

    print("Saved model to:", MODEL_PATH)
    print("Metrics:", json.dumps(metrics, indent=2))

if __name__ == "__main__":
    # You can pass custom sizes by editing below or using environment variables.
    main(n_samples=7000, random_state=42)