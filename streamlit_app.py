# -*- coding: utf-8 -*-
"""Untitled14.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DDyP1uSpoeAdVncLIAfw2RFDgoHTInna
"""

# streamlit.py
# NOTE: Using the filename 'streamlit.py' can shadow the installed 'streamlit' package during imports.
# Running with:  streamlit run streamlit.py  typically works. If you hit import issues, rename to 'app.py'.

from pathlib import Path
import json
import joblib
import pandas as pd
import streamlit as st

from model import NUMERIC_FEATURES, CATEGORICAL_FEATURES, CATEGORICAL_OPTIONS  # schema

ARTIFACTS_DIR = Path(__file__).resolve().parent / "artifacts"
MODEL_PATH = ARTIFACTS_DIR / "house_price_pipeline.joblib"
METRICS_PATH = ARTIFACTS_DIR / "metrics.json"

@st.cache_resource(show_spinner=False)
def load_model():
    if not MODEL_PATH.exists():
        raise FileNotFoundError(
            f"Model not found at {MODEL_PATH}. Run `python train.py` first to create it."
        )
    return joblib.load(MODEL_PATH)

@st.cache_data(show_spinner=False)
def load_metrics():
    if METRICS_PATH.exists():
        with open(METRICS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    return None

st.set_page_config(page_title="House Price Estimator", page_icon="üè†", layout="centered")
st.title("üè† House Price Estimator (Linear Regression)")

with st.sidebar:
    st.header("Enter House Parameters")

    sqft = st.slider("Area (sqft)", min_value=400, max_value=4000, value=1200, step=50)
    num_rooms = st.slider("Number of Rooms", min_value=1, max_value=6, value=3, step=1)
    num_bathrooms = st.slider("Number of Bathrooms", min_value=1, max_value=4, value=2, step=1)
    age_years = st.slider("Age (years)", min_value=0, max_value=50, value=10, step=1)
    distance_to_city_km = st.slider("Distance to City Center (km)", min_value=0, max_value=30, value=8, step=1)
    lot_size_sqft = st.slider("Lot Size (sqft)", min_value=500, max_value=8000, value=2000, step=50)

    has_garage = st.selectbox("Garage", CATEGORICAL_OPTIONS["has_garage"], index=1)
    has_garden = st.selectbox("Garden", CATEGORICAL_OPTIONS["has_garden"], index=1)
    neighborhood = st.selectbox("Neighborhood", CATEGORICAL_OPTIONS["neighborhood"], index=1)

    do_predict = st.button("Predict Price", type="primary")

# Build the single-row input for prediction
input_row = pd.DataFrame(
    {
        "sqft": [sqft],
        "num_rooms": [num_rooms],
        "num_bathrooms": [num_bathrooms],
        "age_years": [age_years],
        "distance_to_city_km": [distance_to_city_km],
        "lot_size_sqft": [lot_size_sqft],
        "has_garage": [has_garage],
        "has_garden": [has_garden],
        "neighborhood": [neighborhood],
    }
)

# Guard: ensure columns align with training schema
expected_cols = NUMERIC_FEATURES + CATEGORICAL_FEATURES
input_row = input_row[expected_cols]

col1, col2 = st.columns(2)
with col1:
    st.subheader("Your Inputs")
    st.dataframe(input_row, use_container_width=True)

with col2:
    st.subheader("Model Metrics")
    metrics = load_metrics()
    if metrics:
        st.metric(label="R¬≤ (test)", value=f"{metrics['R2']:.3f}")
        st.metric(label="RMSE (test)", value=f"{metrics['RMSE']:,.0f}")
        st.metric(label="MAE (test)", value=f"{metrics['MAE']:,.0f}")
    else:
        st.info("Train the model to see metrics.")

if do_predict:
    try:
        model = load_model()
        pred = float(model.predict(input_row)[0])
        st.success(f"Estimated Price: **‚Çπ{pred:,.0f}**")
        st.caption("This is a synthetic model for demo purposes.")
    except Exception as e:
        st.error(f"Prediction failed: {e}")
        st.stop()

st.markdown("---")
st.caption("Tip: retrain with `python train.py` to refresh the model and metrics.")
